"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from lightly.api.openapi_generated.swagger_client.api_client import ApiClient, Endpoint as _Endpoint
from lightly.api.openapi_generated.swagger_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from lightly.api.openapi_generated.swagger_client.model.api_error_response import ApiErrorResponse
from lightly.api.openapi_generated.swagger_client.model.create_entity_response import CreateEntityResponse
from lightly.api.openapi_generated.swagger_client.model.mongo_object_id import MongoObjectID
from lightly.api.openapi_generated.swagger_client.model.sample_create_request import SampleCreateRequest
from lightly.api.openapi_generated.swagger_client.model.sample_data import SampleData
from lightly.api.openapi_generated.swagger_client.model.sample_update_request import SampleUpdateRequest
from lightly.api.openapi_generated.swagger_client.model.sample_write_urls import SampleWriteUrls


class SamplesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_sample_by_dataset_id_endpoint = _Endpoint(
            settings={
                'response_type': (CreateEntityResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'auth0Bearer'
                ],
                'endpoint_path': '/v1/datasets/{datasetId}/samples',
                'operation_id': 'create_sample_by_dataset_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'sample_create_request',
                ],
                'required': [
                    'dataset_id',
                    'sample_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (MongoObjectID,),
                    'sample_create_request':
                        (SampleCreateRequest,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'sample_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_sample_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (SampleData,),
                'auth': [
                    'ApiKeyAuth',
                    'auth0Bearer'
                ],
                'endpoint_path': '/v1/datasets/{datasetId}/samples/{sampleId}',
                'operation_id': 'get_sample_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'sample_id',
                ],
                'required': [
                    'dataset_id',
                    'sample_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (MongoObjectID,),
                    'sample_id':
                        (MongoObjectID,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'sample_id': 'sampleId',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'sample_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_sample_image_read_url_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'ApiKeyAuth',
                    'auth0Bearer'
                ],
                'endpoint_path': '/v1/datasets/{datasetId}/samples/{sampleId}/readurl',
                'operation_id': 'get_sample_image_read_url_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'sample_id',
                    'type',
                ],
                'required': [
                    'dataset_id',
                    'sample_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "FULL": "full",
                        "THUMBNAIL": "thumbnail"
                    },
                },
                'openapi_types': {
                    'dataset_id':
                        (MongoObjectID,),
                    'sample_id':
                        (MongoObjectID,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'sample_id': 'sampleId',
                    'type': 'type',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'sample_id': 'path',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_sample_image_resource_redirect_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'ApiPublicJWTAuth'
                ],
                'endpoint_path': '/v1/datasets/{datasetId}/samples/{sampleId}/readurlRedirect',
                'operation_id': 'get_sample_image_resource_redirect_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'sample_id',
                    'type',
                ],
                'required': [
                    'dataset_id',
                    'sample_id',
                    'type',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "FULL": "full",
                        "THUMBNAIL": "thumbnail"
                    },
                },
                'openapi_types': {
                    'dataset_id':
                        (MongoObjectID,),
                    'sample_id':
                        (MongoObjectID,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'sample_id': 'sampleId',
                    'type': 'type',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'sample_id': 'path',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_sample_image_write_url_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'ApiKeyAuth',
                    'auth0Bearer'
                ],
                'endpoint_path': '/v1/datasets/{datasetId}/samples/{sampleId}/writeurl',
                'operation_id': 'get_sample_image_write_url_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'sample_id',
                    'is_thumbnail',
                ],
                'required': [
                    'dataset_id',
                    'sample_id',
                    'is_thumbnail',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (MongoObjectID,),
                    'sample_id':
                        (MongoObjectID,),
                    'is_thumbnail':
                        (bool,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'sample_id': 'sampleId',
                    'is_thumbnail': 'isThumbnail',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'sample_id': 'path',
                    'is_thumbnail': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_sample_image_write_urls_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (SampleWriteUrls,),
                'auth': [
                    'ApiKeyAuth',
                    'auth0Bearer'
                ],
                'endpoint_path': '/v1/datasets/{datasetId}/samples/{sampleId}/writeurls',
                'operation_id': 'get_sample_image_write_urls_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'sample_id',
                ],
                'required': [
                    'dataset_id',
                    'sample_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (MongoObjectID,),
                    'sample_id':
                        (MongoObjectID,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'sample_id': 'sampleId',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'sample_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_samples_by_dataset_id_endpoint = _Endpoint(
            settings={
                'response_type': ([SampleData],),
                'auth': [
                    'ApiKeyAuth',
                    'auth0Bearer'
                ],
                'endpoint_path': '/v1/datasets/{datasetId}/samples',
                'operation_id': 'get_samples_by_dataset_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'mode',
                    'file_name',
                ],
                'required': [
                    'dataset_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'mode',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('mode',): {

                        "FULL": "full",
                        "IDS": "ids"
                    },
                },
                'openapi_types': {
                    'dataset_id':
                        (MongoObjectID,),
                    'mode':
                        (str,),
                    'file_name':
                        (str,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'mode': 'mode',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'mode': 'query',
                    'file_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_sample_by_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'auth0Bearer'
                ],
                'endpoint_path': '/v1/datasets/{datasetId}/samples/{sampleId}',
                'operation_id': 'update_sample_by_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'sample_id',
                    'sample_update_request',
                    'enable_dataset_update',
                ],
                'required': [
                    'dataset_id',
                    'sample_id',
                    'sample_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (MongoObjectID,),
                    'sample_id':
                        (MongoObjectID,),
                    'sample_update_request':
                        (SampleUpdateRequest,),
                    'enable_dataset_update':
                        (bool,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'sample_id': 'sampleId',
                    'enable_dataset_update': 'enableDatasetUpdate',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'sample_id': 'path',
                    'sample_update_request': 'body',
                    'enable_dataset_update': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_sample_by_dataset_id(
        self,
        dataset_id,
        sample_create_request,
        **kwargs
    ):
        """create_sample_by_dataset_id  # noqa: E501

        Create a new sample in a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_sample_by_dataset_id(dataset_id, sample_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (MongoObjectID): ObjectId of the dataset
            sample_create_request (SampleCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateEntityResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['sample_create_request'] = \
            sample_create_request
        return self.create_sample_by_dataset_id_endpoint.call_with_http_info(**kwargs)

    def get_sample_by_id(
        self,
        dataset_id,
        sample_id,
        **kwargs
    ):
        """get_sample_by_id  # noqa: E501

        Get a specific sample of a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sample_by_id(dataset_id, sample_id, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (MongoObjectID): ObjectId of the dataset
            sample_id (MongoObjectID): ObjectId of the sample

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SampleData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['sample_id'] = \
            sample_id
        return self.get_sample_by_id_endpoint.call_with_http_info(**kwargs)

    def get_sample_image_read_url_by_id(
        self,
        dataset_id,
        sample_id,
        **kwargs
    ):
        """get_sample_image_read_url_by_id  # noqa: E501

        Get the image path of a specific sample of a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sample_image_read_url_by_id(dataset_id, sample_id, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (MongoObjectID): ObjectId of the dataset
            sample_id (MongoObjectID): ObjectId of the sample

        Keyword Args:
            type (str): if we want to get the full image or just the thumbnail. [optional] if omitted the server will use the default value of "full"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['sample_id'] = \
            sample_id
        return self.get_sample_image_read_url_by_id_endpoint.call_with_http_info(**kwargs)

    def get_sample_image_resource_redirect_by_id(
        self,
        dataset_id,
        sample_id,
        type="full",
        **kwargs
    ):
        """get_sample_image_resource_redirect_by_id  # noqa: E501

        This endpoint enables anyone given the correct credentials to access the actual image directly. By creating a readURL for the resource and redirecting to that URL, the client can use this endpoint to always have a way to access the resource as there is no expiration   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sample_image_resource_redirect_by_id(dataset_id, sample_id, type="full", async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (MongoObjectID): ObjectId of the dataset
            sample_id (MongoObjectID): ObjectId of the sample
            type (str): if we want to get the full image or just the thumbnail. defaults to "full", must be one of ["full"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['sample_id'] = \
            sample_id
        kwargs['type'] = \
            type
        return self.get_sample_image_resource_redirect_by_id_endpoint.call_with_http_info(**kwargs)

    def get_sample_image_write_url_by_id(
        self,
        dataset_id,
        sample_id,
        is_thumbnail=False,
        **kwargs
    ):
        """get_sample_image_write_url_by_id  # noqa: E501

        Get the signed url to upload an image to for a specific sample of a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sample_image_write_url_by_id(dataset_id, sample_id, is_thumbnail=False, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (MongoObjectID): ObjectId of the dataset
            sample_id (MongoObjectID): ObjectId of the sample
            is_thumbnail (bool): Whether or not the image to upload is a thumbnail. defaults to False, must be one of [False]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['sample_id'] = \
            sample_id
        kwargs['is_thumbnail'] = \
            is_thumbnail
        return self.get_sample_image_write_url_by_id_endpoint.call_with_http_info(**kwargs)

    def get_sample_image_write_urls_by_id(
        self,
        dataset_id,
        sample_id,
        **kwargs
    ):
        """get_sample_image_write_urls_by_id  # noqa: E501

        Get all signed write URLs to upload all images (full image and thumbnail) of a specific sample of a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sample_image_write_urls_by_id(dataset_id, sample_id, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (MongoObjectID): ObjectId of the dataset
            sample_id (MongoObjectID): ObjectId of the sample

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SampleWriteUrls
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['sample_id'] = \
            sample_id
        return self.get_sample_image_write_urls_by_id_endpoint.call_with_http_info(**kwargs)

    def get_samples_by_dataset_id(
        self,
        dataset_id,
        **kwargs
    ):
        """get_samples_by_dataset_id  # noqa: E501

        Get all samples of a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_samples_by_dataset_id(dataset_id, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (MongoObjectID): ObjectId of the dataset

        Keyword Args:
            mode (str): if we want everything (full) or just the ObjectIds. [optional] if omitted the server will use the default value of "full"
            file_name (str): filter the samples by filename. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [SampleData]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['dataset_id'] = \
            dataset_id
        return self.get_samples_by_dataset_id_endpoint.call_with_http_info(**kwargs)

    def update_sample_by_id(
        self,
        dataset_id,
        sample_id,
        sample_update_request,
        **kwargs
    ):
        """update_sample_by_id  # noqa: E501

        update a specific sample of a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_sample_by_id(dataset_id, sample_id, sample_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (MongoObjectID): ObjectId of the dataset
            sample_id (MongoObjectID): ObjectId of the sample
            sample_update_request (SampleUpdateRequest): The updated sample to set

        Keyword Args:
            enable_dataset_update (bool): [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['sample_id'] = \
            sample_id
        kwargs['sample_update_request'] = \
            sample_update_request
        return self.update_sample_by_id_endpoint.call_with_http_info(**kwargs)

